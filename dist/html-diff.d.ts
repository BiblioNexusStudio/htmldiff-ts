import { HtmlDiffConfig } from './html-diff-config';
import { Operation } from './operation';
import { MatchingBlock } from './matching-block';
export default class HtmlDiff {
    wordIndices: Map<string, number[]>;
    newIsolatedDiffTags: {
        [key: number]: string[];
    };
    oldIsolatedDiffTags: {
        [key: number]: string[];
    };
    justProcessedDeleteFromIndex: number;
    oldTextIsOnlyWhitespaceCache: Map<number, number>;
    config: HtmlDiffConfig;
    content: string;
    oldText: string;
    newText: string;
    oldWords: string[];
    newWords: string[];
    constructor(oldText: string, newText: string);
    splitInputsToWords(): void;
    setOldWords(oldWords: string[]): void;
    setNewWords(newWords: string[]): void;
    convertHtmlToListOfWords(text: string): string[];
    normalizeWhitespaceInHtmlSentence(sentence: string): string;
    static create(oldText: string, newText: string): HtmlDiff;
    build(): string;
    indexNewWords(): void;
    replaceIsolatedDiffTags(): void;
    createIsolatedDiffTagPlaceholders(words: string[]): {
        [key: number]: string[];
    };
    isOpeningIsolatedDiffTag(item: string, currentIsolatedDiffTag?: string | null): string | false;
    isSelfClosingTag(text: string): boolean;
    isClosingIsolatedDiffTag(item: string, currentIsolatedDiffTag?: string | null): string | false;
    performOperation(operation: Operation): void;
    processReplaceOperation(operation: Operation): void;
    processInsertOperation(operation: Operation, cssClass: string): void;
    processDeleteOperation(operation: Operation, cssClass: string): void;
    diffIsolatedPlaceholder(operation: Operation, pos: number, placeholder: string, stripWrappingTags?: boolean): string;
    diffElements(oldText: string, newText: string, stripWrappingTags?: boolean): string;
    diffPicture(oldText: string, newText: string): string;
    diffElementsByAttribute(oldText: string, newText: string, attribute: string, element: string): string;
    processEqualOperation(operation: Operation): void;
    replaceParagraphSymbolWithBreaksIfNeeded(): void;
    getAttributeFromTag(text: string, attribute: string): string | null;
    isLinkPlaceholder(text: string): boolean;
    isImagePlaceholder(text: string): boolean;
    isPicturePlaceholder(text: string): boolean;
    isPlaceholderType(text: string, types: string | string[]): boolean;
    findIsolatedDiffTagsInOld(operation: Operation, posInNew: number): string[];
    insertTag(tag: string, cssClass: string, words: string[]): void;
    checkCondition(word: string, condition: string): boolean;
    wrapText(text: string, tagName: string, cssClass: string): string;
    extractConsecutiveWords(words: string[], condition: string): string[];
    isTag(item: string): boolean;
    isOpeningTag(item: string): boolean;
    isClosingTag(item: string): boolean;
    operations(): Operation[];
    getAction(matchStartsAtCurrentPositionInOld: boolean, matchStartsAtCurrentPositionInNew: boolean): number;
    matchingBlocks(): MatchingBlock[];
    findMatchingBlocks(startInOld: number, endInOld: number, startInNew: number, endInNew: number, matchingBlocks: MatchingBlock[]): void;
    stripTagAttributes(word: string): string;
    findMatch(startInOld: number, endInOld: number, startInNew: number, endInNew: number): MatchingBlock | null;
    oldTextIsOnlyWhitespace(startingAtWord: number, wordCount: number): boolean;
    htmlspecialcharsDecode(input: string): string;
}
